// PreloadScene: Loads all assets for the merge game
import Phaser from "phaser";
import { getFinalGameAssets } from "../generics/game-assets";
import { phaserHelpers } from "../generics/phaser/phaser-helpers";

export default class PreloadScene extends Phaser.Scene {
    private progressBar!: Phaser.GameObjects.Graphics;
    private progressBox!: Phaser.GameObjects.Graphics;
    private loadingText!: Phaser.GameObjects.Text;
    private iconImage!: Phaser.GameObjects.Image;
    private backgroundIcon!: Phaser.GameObjects.Image;
    private appierLogo!: Phaser.GameObjects.Image;
    private barX!: number;
    private barY!: number;
    private barWidth: number = 640;
    private barHeight: number = 40;
    private innerPadding: number = 8;

    constructor() {
        super("PreloadScene");
    }

    preload() {
        // Create loading UI immediately (with placeholder for icon)
        this.createLoadingBar();

        // Set up loading progress events
        this.setupLoadingEvents();

        phaserHelpers.loadAssetsToPhaser(this, {
            icon: getFinalGameAssets().assets.icon,
        });
        phaserHelpers.loadAssetsToPhaser(this, {
            "appier-logo": getFinalGameAssets().assets["appier-logo"],
        });

        phaserHelpers.loadAssetsToPhaser(this, getFinalGameAssets().assets);

        // Load character atlas (same pattern as @merge-2)
        // These keys are generated by build-flow/assets-to-base64.ts
        if (window.base64Map && window.base64Map["assets"]) {
            const assets = window.base64Map["assets"] as Record<string, any>;
            if (
                assets["neutral-character-atlas"] &&
                assets["neutral-character-atlas-json"]
            ) {
                this.load.atlas(
                    "neutral-character-sheet",
                    assets["neutral-character-atlas"],
                    assets["neutral-character-atlas-json"]
                );
            }
        }

        // Show icon as soon as it's individually loaded
        this.load.on("filecomplete-image-icon", () => {
            // Create scaled and blurred background icon
            this.backgroundIcon = this.add.image(
                this.scale.width / 2,
                this.scale.height / 2,
                "icon"
            );
            this.backgroundIcon.setOrigin(0.5, 0.5);
            // Scale to cover the entire screen
            const scaleX = this.scale.width / this.backgroundIcon.width;
            const scaleY =
                this.scale.height / this.backgroundIcon.height;
            const scale = Math.max(scaleX, scaleY) * 1.2; // Extra scaling for better coverage
            this.backgroundIcon.setScale(scale);

            // Add blur and other effects using preFX
            if (this.backgroundIcon.preFX) {
                this.backgroundIcon.preFX.addBlur(0, 2, 2, 6, 0xffffff, 30); // Add blur effect
            }

            // Hide placeholder and show actual icon on top
            this.iconImage = this.add.image(
                this.scale.width / 2,
                this.scale.height / 2 - 180,
                "icon"
            );
            this.iconImage.setOrigin(0.5, 0.5);
            this.iconImage.setDisplaySize(400, 400);
            this.iconImage.setDepth(10); // Bring to front
        });

        // Show appier logo when it loads
        this.load.on("filecomplete-image-appier-logo", () => {
            // Appier logo below progress bar
            this.appierLogo = this.add.image(
                this.scale.width / 2,
                this.scale.height / 2 + 340,
                "appier-logo"
            );
            this.appierLogo.setOrigin(0.5, 0.5);
            this.appierLogo.setDisplaySize(320, 120);
            this.appierLogo.setDepth(10);
        });
    }

    create() {
        // For debug purpose - comment out scene transition to stay on progress bar scene
        this.scene.start("MainScene");
    }

    private createLoadingBar() {
        const width = this.scale.width;
        const height = this.scale.height;

        // Position and size of the capsule bar
        this.barWidth = 640;
        this.barHeight = 40;
        this.barX = width / 2 - this.barWidth / 2;
        this.barY = height / 2 - this.barHeight / 2 + 180;

        // Static track (outer and inner borders with a subtle dark track)
        this.progressBox = this.add.graphics();
        this.progressBox.setDepth(2);

        // Outer white border (slightly larger for the double-outline look)
        this.progressBox.lineStyle(4, 0xffffff, 0.95);
        this.progressBox.strokeRoundedRect(
            this.barX - 12,
            this.barY - 12,
            this.barWidth + 24,
            this.barHeight + 24,
            (this.barHeight + 24) / 2
        );

        // Track background
        this.progressBox.fillStyle(0x000000, 0.25);
        this.progressBox.fillRoundedRect(
            this.barX,
            this.barY,
            this.barWidth,
            this.barHeight,
            this.barHeight / 2
        );

        // Inner subtle white border
        this.progressBox.lineStyle(2, 0xffffff, 0.65);
        this.progressBox.strokeRoundedRect(
            this.barX,
            this.barY,
            this.barWidth,
            this.barHeight,
            this.barHeight / 2
        );

        // Foreground progress fill
        this.progressBar = this.add.graphics();
        this.progressBar.setDepth(3);

        // Loading text
        this.loadingText = this.add.text(
            width / 2,
            this.barY - 100,
            "Age of Empires",
            {
                font: "64px Arial",
                color: "#FFFFFF",
            }
        );
        this.loadingText.setOrigin(0.5, 0.5);
        this.loadingText.setDepth(5);
    }

    private setupLoadingEvents() {
        // Update progress bar as assets load
        this.load.on("progress", (value: number) => {
            // Update progress bar fill in a rounded capsule style
            const innerX = this.barX + this.innerPadding;
            const innerY = this.barY + this.innerPadding;
            const innerW = this.barWidth - this.innerPadding * 2;
            const innerH = this.barHeight - this.innerPadding * 2;
            const fillW = Math.max(0, innerW * value);

            this.progressBar.clear();
            this.progressBar.fillStyle(0xffffff, 0.95);
            if (fillW > 0) {
                this.progressBar.fillRoundedRect(
                    innerX,
                    innerY,
                    Math.max(8, fillW),
                    innerH,
                    innerH / 2
                );
            }
        });

        // When loading is complete
        this.load.on("complete", () => {
            // Clean up loading UI elements (optional)
            if (this.iconImage) this.iconImage.destroy();
            if (this.backgroundIcon) this.backgroundIcon.destroy();
            this.progressBar.destroy();
            this.progressBox.destroy();
            this.loadingText.destroy();
            this.appierLogo.destroy();
        });
    }
}
